runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
hosp_data <- read.csv('C:/Users/yvonn/Downloads/Hospitals in Australia with childbirth stats-1.csv')
head(hosp_data)
hosp_data$Year <- as.numeric(gsub("Childbirth.", "", hosp_data$Year))
runApp('shiny.R')
runApp('shiny.R')
load("C:\\Users\\yvonn\\Downloads\\gefcom.rda)
ls()
load("C:\\Users\\yvonn\\Downloads\\gefcom.rda")
load("C:\\Users\\yvonn\\Downloads\\gefcom.rda")
ls()
install.packages("devtools")
library(devtools)
devtools::install_github("camroach87/gefcom2017data")
library(gefcom2017data)
?gefcom2017data
??gefcom2017data
?gefcom
?gefcom
data("GEFCom2017")
cwd()
data("gefcom2017")
data("gefcom")
gwd()
getwd()
set.seed(1234)
y1=rnorm(n=100, mean=5, sd=1.5)
y2=rnorm(n=300, mean=10, sd=1.5)
y=c(y1,y2)
########begin tut3em.f function
theta=matrix(0, iter+1,4)
########begin tut3em.f function
tut3em.f=function(y, theta0, iter=20){
theta=matrix(0, iter+1,4)
n=length(y)
z=matrix (0, n, iter+1) # matrix of conditional mean of Z_is
loglik=rep(-1,iter+1)
theta[1,]=theta0
tem1=theta[1,1]*exp(-0.5*(y-theta[1,2])^2/(theta[1,4])^2)
tem2=(1-theta[1,1])*exp(-0.5*(y-theta[1,3])^2/(theta[1,4])^2)
loglik[1]=-n*log(sqrt(2*pi)*theta[1,4])+sum(log(tem1+tem2))
z[,1]=tem1/(tem1+tem2)
for(k in 1:iter){
theta[k+1,1]=mean(z[,k]) #calculate p(k+1)
theta[k+1,2]=sum(z[,k]*y)/sum(z[,k]) #calculate mu1(k+1)
theta[k+1,3]=sum((1-z[,k])*y)/sum(1-z[,k]) #calculate mu2(k+1)
theta[k+1,4]=sqrt((1/n)*(sum(z[,k]*(y-theta[k+1,2])^2)+sum((1-z[,k])*(y-theta[k+1,3])^2)))
tem1=theta[k+1,1]*exp(-0.5*(y-theta[k+1,2])^2/(theta[k+1,4])^2)
tem2=(1-theta[k+1,1])*exp(-0.5*(y-theta[k+1,3])^2/(theta[k+1,4])^2)
loglik[k+1]=-n*log(sqrt(2*pi)*theta[k+1,4])+sum(log(tem1+tem2))
z[,k+1]=tem1/(tem1+tem2)
}
result=list(theta=theta, z=z, loglik=loglik)
}
####end tut3em.f function
em1=tut3em.f(y, theta0=c(0.4, min(y), max(y), sd(y)))
em2=tut3em.f(y, theta0=c(0.4, max(y), min(y), sd(y)))
em3=tut3em.f(y, theta0=c(0.9, min(y), max(y), sd(y)+1), iter=70)
em1$theta[21,]
em1$loglik
em2$theta[21,]
em2$loglik
library(dplyr)
library(tidyr)
library(janitor)
library(tidyselect)
library(rworldmap)
install.packages("janitor")
install.packages("rworldmap")
# Data Preparation
energy_data <- read.csv("energy_2021.csv")
# Data Preparation
energy_data <- read.csv(""C:\\Users\\yvonn\\Downloads\\energy_2021.csv"")
# Data Preparation
energy_data <- read.csv("C:\\Users\\yvonn\\Downloads\\energy_2021.csv")
library(shiny)
library(leaflet)
library(rnaturalearth)
install.packages("rnaturalearth")
library(rnaturalearth)
library(sf)
library(tidyverse)
runApp('iva2.R')
runApp('iva2.R')
library(leaflet)
library(rworldmap)
library(readr) # For read_csv
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('shiny.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
library(leaflet.extras)
install.packages("leaflet.extras")
runApp('iva2.R')
install.packages("leaflet.extras2")
library(leaflet.extras2)
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
library(shiny); runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
library(shiny); runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
install.packages("rnaturalearthdata")
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
install.packages("countrycode")
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
runApp('iva2.R')
library(shiny); runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
library(shiny); runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
install.packages("leaflet.extras2")
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
library(shiny); runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
library(shiny); runApp('C:/Users/yvonn/Downloads/iv/iva2.R')
### Starter code for Homework 2, last problem ###
# Our true mean function: will be sin(x/2) on [0,4*pi] and sin(6*x) on [4*pi,8*pi]
# Input: a vector of real numbers (x)
# Output: the vector of function values at x
mu = function(x){
# Initialize a vector of zeros
y = numeric(length(x))
# Figure out which points are to the left or right of 4*pi
left_points = (x<=4*pi)
right_points = (x>4*pi)
# Assign the appropriate sine values
y[left_points] = sin(x[left_points]/2)
y[right_points] = sin(6*x[right_points])
# Return y
y
}
# A function to draw a sample from this curve
# Input: number of samples to draw (n)
# Output: data frame with columns named "x" and "y"
generate_sample = function(n){
# Sample the x coordinates uniformly on [0,8*pi].
# We sort the x here to make plotting easier later.
x = sort(runif(n,0,8*pi))
# Sample the y coordinates as Gaussians around mu(x)
y = mu(x) + rnorm(n,0,.2) # standard deviation of the noise is hard coded
# Bind this all together into a data frame
data.frame(x=x,y=y)
}
# We set the seed so that your works will match
set.seed(9781)
# Sample 300 points.  This is your data set!
data = generate_sample(300)
##Q1-1
library(ggplot2)
# Plotting y vs x
ggplot(data, aes(x=x, y=y)) +
geom_point(aes(color="Sample Data"), size=1.5) + # Plot the data points
stat_function(fun=mu, color="red", aes(color="True Mean Function")) + # Overlay the true mean function
labs(title="y vs x with True Mean Function Overlay",
x="x",
y="y",
color="Legend") +
theme_minimal()
##Q1-2
library(np)
# Split the data based on the condition x < 4*pi and x > 4*pi
data_left <- subset(data, x <= 4*pi)
data_right <- subset(data, x > 4*pi)
# Fit kernel regression on each subset
regression_left <- npreg(y ~ x, data=data_left)
regression_right <- npreg(y ~ x, data=data_right)
regression_all <- npreg(y ~ x, data=data)
# Extract the optimal bandwidths
bandwidth_left <- regression_left$bws
bandwidth_right <- regression_right$bws
bandwidth_all <- regression_all$bws
# Print the optimal bandwidths
cat("Optimal bandwidth for x < 4*pi:", bandwidth_left, "\n")
# Print the optimal bandwidths for each regression
cat("Optimal bandwidth for x < 4*pi:", bandwidth_left$x, "\n")
cat("Optimal bandwidth for x > 4*pi:", bandwidth_right$x, "\n")
cat("Optimal bandwidth for all data points:", bandwidth_all$x, "\n")
### Starter code for Homework 2, last problem ###
# Our true mean function: will be sin(x/2) on [0,4*pi] and sin(6*x) on [4*pi,8*pi]
# Input: a vector of real numbers (x)
# Output: the vector of function values at x
mu = function(x){
# Initialize a vector of zeros
y = numeric(length(x))
# Figure out which points are to the left or right of 4*pi
left_points = (x<=4*pi)
right_points = (x>4*pi)
# Assign the appropriate sine values
y[left_points] = sin(x[left_points]/2)
y[right_points] = sin(6*x[right_points])
# Return y
y
}
# A function to draw a sample from this curve
# Input: number of samples to draw (n)
# Output: data frame with columns named "x" and "y"
generate_sample = function(n){
# Sample the x coordinates uniformly on [0,8*pi].
# We sort the x here to make plotting easier later.
x = sort(runif(n,0,8*pi))
# Sample the y coordinates as Gaussians around mu(x)
y = mu(x) + rnorm(n,0,.2) # standard deviation of the noise is hard coded
# Bind this all together into a data frame
data.frame(x=x,y=y)
}
# We set the seed so that your works will match
set.seed(9781)
# Sample 300 points.  This is your data set!
data = generate_sample(300)
##Q1-1
library(ggplot2)
# Plotting y vs x
ggplot(data, aes(x=x, y=y)) +
geom_point(aes(color="Sample Data"), size=1.5) + # Plot the data points
stat_function(fun=mu, color="red", aes(color="True Mean Function")) + # Overlay the true mean function
labs(title="y vs x with True Mean Function Overlay",
x="x",
y="y",
color="Legend") +
theme_minimal()
##Q1-2
library(np)
# Split the data based on the condition x < 4*pi and x > 4*pi
data_left <- subset(data, x <= 4*pi)
data_right <- subset(data, x > 4*pi)
# Fit kernel regression on each subset
regression_left <- npreg(y ~ x, data=data_left)
regression_right <- npreg(y ~ x, data=data_right)
regression_all <- npreg(y ~ x, data=data)
# Extract the optimal bandwidths
bandwidth_left <- regression_left$bws
bandwidth_right <- regression_right$bws
bandwidth_all <- regression_all$bws
# Print the optimal bandwidths for each regression
cat("Optimal bandwidth for x < 4*pi:", bandwidth_left$x, "\n")
cat("Optimal bandwidth for x > 4*pi:", bandwidth_right$x, "\n")
cat("Optimal bandwidth for all data points:", bandwidth_all$x, "\n")
# Print the optimal bandwidths for each regression
cat("Optimal bandwidth for x < 4*pi:", bandwidth_left, "\n")
# Extract and print the optimal bandwidths
cat("Optimal bandwidth for x < 4*pi:", bandwidth_left$bw[1], "\n")
cat("Optimal bandwidth for x > 4*pi:", bandwidth_right$bw[1], "\n")
cat("Optimal bandwidth for all data points:", bandwidth_all$bw[1], "\n")
bandwidth_right
bandwidth_right$bw[2]
bandwidth_right$bw[2]
library(shiny); runApp('C:/Users/yvonn/Downloads/iv/iva2_BoyanWu.R')
# Importing libraries
library(shiny)
library(mapboxapi)
library(fontawesome)
library(shinyWidgets)
library(shinydashboard)
library(igraph)
library(highcharter)
library(dashboardthemes)
source('helper.R')
# Define UI for application that draws a histogram
header <- dashboardHeader(
# Define the header and insert image as title
title = tags$a(tags$img(src='https://bit.ly/3rFI94P',
height='55', width='160')),
titleWidth = 250
)
sidebar <- dashboardSidebar(
width = 250,
sidebarMenu(
# Tab for different visualisation
menuItem("Home",
tabName = "home",
selected = T,
icon = icon('thumbs-up')),
menuItem("Places to Visit",
tabName = "poi",
icon = icon('map-location-dot')),
menuItem("Melbourne Weather",
tabName = "weather",
icon = icon('sun')),
menuItem("Pedestrian Volume Monitor",
tabName = "traffic",
icon = icon("users")),
menuItem("Tourism Industry Recovery",
tabName = "tour",
icon = icon('plane')),
menuItem("FAQs",
tabName = "faqs",
icon = icon("question")
),
menuItem("Setting",
tabName = "setting",
icon = icon("gear"),
radioButtons("displaymode", "Display Mode", choices = c('Light Mode' = 'lightMode', 'Dark Mode' = 'darkMode'), selected="lightMode")
)
)
)
shiny::runApp('C:/Users/yvonn/Downloads/POIs-in-Melbourne-main/POIs-in-Melbourne-main')
shiny::runApp('D:/geom90007-a3/R')
library(shiny); runApp('D:/geom90007-a3/R/server_weather.R')
runApp('D:/geom90007-a3/R/server_weather.R')
runApp('D:/geom90007-a3/R/server_weather.R')
runApp('D:/geom90007-a3/R/server_weather.R')
runApp('D:/geom90007-a3/R/server_weather.R')
runApp('D:/geom90007-a3/R/server_weather.R')
library(shiny); runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
forecast_data <- get_forecast("Melbourne, AU", units = "metric")
forecast_data
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
current_weather <- get_current("Melbourne, AU", units = "metric")
current_weather
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
rain_measure <- ifelse(is.null(current_weather$rain$`3h`), 0, current_weather$rain$`3h`)
rain_measure
rain_measure <- ifelse(is.null(current_weather$rain$`5h`), 0, current_weather$rain$`5h`)
current_weather
rain_measure
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
forecast_data$list$rain$'3h'
forecast_data
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
forecast_df$pop <- forecast_df$pop * 100
print(head(forecast_df$pop, 10))
print(head(forecast_df$pop, 20))
print(head(forecast_df$pop, 30))
forecast_data <- get_forecast("Melbourne, AU", units = "metric")
forecast_data
forecast_df <- data.frame(
tmstmp =  forecast_data$list$dt_txt,
temp = forecast_data$list$main.temp,
fl_temp = forecast_data$list$main.feels_like,
humidity = forecast_data$list$main.humidity,
wind_speed = forecast_data$list$wind.speed,
pop = forecast_data$list$pop
)
forecast_df$pop <- forecast_df$pop * 100
print(head(forecast_df$pop, 30))
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
runApp('D:/POIs-in-Melbourne-main/POIs-in-Melbourne-main/server_weather.R')
library(shiny); runApp('D:/geom90007-a3/new_R/main.R')
runApp('D:/geom90007-a3/new_R/main.R')
runApp('D:/geom90007-a3/new_R/main.R')
runApp('D:/geom90007-a3/new_R/main.R')
runApp('D:/geom90007-a3/new_R/main.R')
runApp('D:/geom90007-a3/new_R/main.R')
